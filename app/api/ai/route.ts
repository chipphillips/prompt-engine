import { NextResponse } from 'next/server';
import { renderTemplate } from '@/lib/renderTemplate';
import OpenAI from 'openai';
import { logPrompt } from '@/lib/supabaseClient';

// Log OpenAI initialization status (without exposing the full key)
const openaiApiKey = process.env.OPENAI_API_KEY;
const isMockKey = !openaiApiKey || openaiApiKey === 'sk-mock-key';

// Use console.log for debugging
console.log(`OpenAI API Key status: ${openaiApiKey ? 'Provided' : 'Missing'}`);
console.log(`Using mock data: ${isMockKey}`);
if (openaiApiKey) {
    console.log(`Key format check: ${openaiApiKey.startsWith('sk-') ? 'Valid prefix' : 'Invalid prefix'}`);
    console.log(`Key length: ${openaiApiKey.length} characters`);
}

const openai = new OpenAI({
    apiKey: openaiApiKey || 'sk-mock-key'
});

export async function POST(request: Request) {
    try {
        const payload = await request.json();
        const prompt = renderTemplate(payload.template, payload.variables);
        const promptObject = {
            template: payload.template,
            variables: payload.variables,
            rendered_prompt: prompt
        };

        // If we're definitely using a mock key, don't even try the API
        if (isMockKey) {
            console.log('Using mock response due to missing/invalid API key');
            const mockResponse = "This is a mock response. In production, this would be generated by AI.";

            // Log the mock prompt
            await logPrompt(promptObject, mockResponse);

            return NextResponse.json({
                content: mockResponse,
                _debug: { usingMock: true, reason: "Missing or invalid API key" }
            });
        }

        // Otherwise attempt to use the real API
        try {
            console.log('Attempting to call OpenAI API');
            const response = await openai.chat.completions.create({
                model: 'gpt-4o',
                messages: [{ role: 'user', content: prompt }]
            });

            const content = response.choices[0]?.message.content || 'No response generated';
            console.log('OpenAI API call successful');

            // Log the successful prompt
            await logPrompt(promptObject, content);

            return NextResponse.json({
                content,
                _debug: { usingMock: false }
            });
        } catch (error) {
            // Log the specific error for debugging
            console.error('OpenAI API error:', error);

            const errorResponse = "This is a mock response. The OpenAI API call failed with an error.";

            // Log the failed prompt
            await logPrompt(promptObject, errorResponse);

            return NextResponse.json({
                content: errorResponse,
                _debug: {
                    usingMock: true,
                    reason: "API Error",
                    error: error instanceof Error ? error.message : String(error)
                }
            });
        }
    } catch (error) {
        console.error('Error generating AI response:', error);
        return NextResponse.json(
            {
                error: 'Failed to generate AI response',
                _debug: { error: error instanceof Error ? error.message : String(error) }
            },
            { status: 500 }
        );
    }
} 